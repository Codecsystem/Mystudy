#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <map>
#include <iostream>
#include <queue>
#include <set>
#include <stack>
#include <vector>
using namespace std;
/*hash mod number 53 97 193 389 769 1543 3079 6151 12289 24593 49157 98317 196613 393241 786433 1572869 3145739 6291469 12582917 25165843 50331653 100663319 402653189 805306457 1610612741 (1e9+7,1e9+9)*/ 
/*prime such as 4k+3 (some
const int MOD1=98317,MOD2=196613;
vector <int> a[MOD1];
vector <int> vis;
bool _find(int x)
{
    if(!a[(x%MOD1+MOD1)%MOD1].size()) return false;
    for(int i=0;i<a[(x%MOD1+MOD1)%MOD1].size();i++)
    {
        if(a[(x%MOD1+MOD1)%MOD1][i]==x) return true;
    }
    return false;
}
void _insert(int x)
{
    if(!_find(x)) 
    {
        a[(x%MOD1+MOD1)%MOD1].push_back(x);
        vis.push_back((x%MOD1+MOD1)%MOD1);
    }
    return ;
}
int read()
{
    int s=0,f=1;
    char ch=getchar();
    while(ch<'0'||ch>'9')
    {
        if(ch=='-') f=-1;
        ch=getchar();
    }
    while(ch>='0'&&ch<='9')
    {
        s=(s<<3)+(s<<1)+ch-'0';
        ch=getchar();
    }
    return s*f;
}
inline void write(int x) 
{
    static int sta[35]; 
    int top=0;
    if(x<0) {putchar('-');x=-x;}
    do{
      sta[top++]=x%10,x/=10;
      }while(x);
    while(top) putchar(sta[--top]+48);
}
int main()
{
    int T_start=clock();
    int t=read();
    while(t--)
    {
        int n=read();
        for(int i=0;i<n;i++)
        {
            int x=read();
            if(!_find(x))
            {
                _insert(x);
                write(x),putchar(' ');
            }
        }
        putchar('\n');
        for(auto i:vis)
        {
            a[i].clear();
        }
        vis.clear();
    }
    
    
    return 0;
}